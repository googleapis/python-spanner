# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.spanner.executor.v1 import cloud_executor_pb2 as google_dot_spanner_dot_executor_dot_v1_dot_cloud__executor__pb2


class SpannerExecutorProxyStub(object):
    """Service that executes SpannerActions asynchronously.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteActionAsync = channel.stream_stream(
                '/google.spanner.executor.v1.SpannerExecutorProxy/ExecuteActionAsync',
                request_serializer=google_dot_spanner_dot_executor_dot_v1_dot_cloud__executor__pb2.SpannerAsyncActionRequest.SerializeToString,
                response_deserializer=google_dot_spanner_dot_executor_dot_v1_dot_cloud__executor__pb2.SpannerAsyncActionResponse.FromString,
                )


class SpannerExecutorProxyServicer(object):
    """Service that executes SpannerActions asynchronously.
    """

    def ExecuteActionAsync(self, request_iterator, context):
        """ExecuteActionAsync is a streaming call that starts executing a new Spanner
        action.

        For each request, the server will reply with one or more responses, but
        only the last response will contain status in the outcome.

        Responses can be matched to requests by action_id. It is allowed to have
        multiple actions in flight--in that case, actions are be executed in
        parallel.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpannerExecutorProxyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteActionAsync': grpc.stream_stream_rpc_method_handler(
                    servicer.ExecuteActionAsync,
                    request_deserializer=google_dot_spanner_dot_executor_dot_v1_dot_cloud__executor__pb2.SpannerAsyncActionRequest.FromString,
                    response_serializer=google_dot_spanner_dot_executor_dot_v1_dot_cloud__executor__pb2.SpannerAsyncActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'google.spanner.executor.v1.SpannerExecutorProxy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SpannerExecutorProxy(object):
    """Service that executes SpannerActions asynchronously.
    """

    @staticmethod
    def ExecuteActionAsync(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/google.spanner.executor.v1.SpannerExecutorProxy/ExecuteActionAsync',
            google_dot_spanner_dot_executor_dot_v1_dot_cloud__executor__pb2.SpannerAsyncActionRequest.SerializeToString,
            google_dot_spanner_dot_executor_dot_v1_dot_cloud__executor__pb2.SpannerAsyncActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
